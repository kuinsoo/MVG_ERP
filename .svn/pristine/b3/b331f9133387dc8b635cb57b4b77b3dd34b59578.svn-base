package material.service;

import material.dao.IMaterialDao;
import material.dao.MaterialDao;
import material.vo.AssistantVo;
import material.vo.BuyerVo;
import material.vo.MaterialCateVo;
import material.vo.MaterialMainVo;
import material.vo.MaterialVo;

import java.util.List;
import java.util.Map;

public class MaterialService implements IMaterialService {
	private IMaterialDao dao;
	static private MaterialService service;
	private MaterialService() {
		dao = MaterialDao.getInstance();
	}
	public static MaterialService getInstance() {
		if(service == null) {
			service = new MaterialService();
		}
		return service;
	}

	/**
	 *@Method Name : getAllMat
	 *@date : 2018. 9. 15.
	 *@author : JeeSeon
	 *@Method 설명 : 자재전체 검색 
	 *@param 
	 *@return getAllMat
	 */
	@Override
	public List<MaterialVo> getAllMat() {
		return dao.getAllMat();
	}

	/**
	 *@Method Name : getMatWearingMain
	 *@date : 2018. 9. 15.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 입고 관리 기본테이블 
	 *@param 
	 *@return getMatWearingMain
	 */
	@Override
	public List<MaterialMainVo> getMatWearingMain() {
		return dao.getMatWearingMain();
	}

	
	
	/**
	 *@Method Name : insertMatAdd
	 *@date : 2018. 9. 18.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 입고 등록
	 *@param matMainVo
	 *@return insertMatAdd
	 */
	@Override
	public int insertMatAdd(MaterialVo matMainVo) {
		return dao.insertMatAdd(matMainVo);
	}
	
	/**
	 *@Method Name : matUpdate
	 *@date : 2018. 9. 20.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 입고 수정
	 *@param matVo
	 *@return matUpdate
	 */
	@Override
	public int matUpdate(MaterialVo matVo) {
		return dao.matUpdate(matVo);
	}
	
	/**
	 *@Method Name : deleteMat
	 *@date : 2018. 9. 16.
	 *@author : JeeSeon
	 *@Method 설명 : 선택된 자재 삭제
	 *@param mat_code
	 *@return deleteMat
	 */
	@Override
	public int deleteMat(List<String> mat_code) {
		return dao.deleteMat(mat_code);
	}
	
	
	/**
	 *@Method Name : matClassificationCode
	 *@date : 2018. 9. 18.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 입고등록시 자재분류 콤보박스
	 *@param 
	 *@return matClassificationCode
	 */
	@Override
	public List<MaterialCateVo> matClassificationCode() {
		return dao.matClassificationCode();
	}
	
	/**
	 *@Method Name : matAccountCode
	 *@date : 2018. 9. 18.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 입고등록시 거래처코드 콤보박스
	 *@param 
	 *@return matAccountCode
	 */
	@Override
	public List<BuyerVo> matAccountCode() {
		return dao.matAccountCode();
	}
	
	/**
	 *@Method Name : getMat
	 *@date : 2018. 9. 18.
	 *@author : JeeSeon
	 *@Method 설명 : 자재를 여러가지 옵션으로 검색한다
	 *@param mat
	 *@return getMat
	 */
	@Override
	public List<MaterialMainVo> getMat(Map<String, String> mat) {
		return dao.getMat(mat);
	}
	
	
	/**
	 *@Method Name : getMatDeferentMain
	 *@date : 2018. 9. 15.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 수불 관리 기본테이블 
	 *@param 
	 *@return getMatDeferentMain
	 */
	@Override
	public List<AssistantVo> getMatDeferentMain() {
		return dao.getMatDeferentMain();
	}
	
	
	
	/**
	 *@Method Name : insertAstAdd
	 *@date : 2018. 9. 18.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 수불 등록
	 *@param astVo
	 *@return insertAstAdd
	 */ 
	@Override
	public int insertAstAdd(AssistantVo astVo) {
		return dao.insertAstAdd(astVo);
	}
	
	/**
	 *@Method Name : assUpdate
	 *@date : 2018. 9. 20.
	 *@author : JeeSeon
	 *@Method 설명 : 자재 수불 수정 
	 *@param assVo
	 *@return assUpdate
	 */
	@Override
	public int assUpdate(AssistantVo assVo) {
		return dao.assUpdate(assVo);
	}
	
	/**
	 *@Method Name : deleteAss
	 *@date : 2018. 9. 24.
	 *@author : JeeSeon
	 *@Method 설명 : 선택된 수불 삭제
	 *@param ast_no
	 *@return deleteAss
	 */
	@Override
	public int deleteAss(List<String> ast_no) {
		return dao.deleteAss(ast_no);
	}
	
	/**
	 *@Method Name : getAst
	 *@date : 2018. 9. 24.
	 *@author : JeeSeon
	 *@Method 설명 : 수불을 여러가지 옵션으로 검색한다.
	 *@param ast
	 *@return getAst
	 */
	@Override
	public List<AssistantVo> getAst(Map<String, String> ast) {
		return dao.getAst(ast);
	}
	
	
	/**
	 *@Method Name : getMatArticle
	 *@date : 2018. 9. 25.
	 *@author : JeeSeon
	 *@Method 설명 : 자재부 물품관리 기본테이블
	 *@param 
	 *@return getMatArticle
	 */
	@Override
	public List<MaterialMainVo> getMatArticle() {
		return dao.getMatArticle();
	}
	
	/**
	 *@Method Name : insertArticleAdd
	 *@date : 2018. 9. 18.
	 *@author : JeeSeon
	 *@Method 설명 : 물품 등록
	 *@param matMainVo
	 *@return insertArticleAdd
	 */
	@Override
	public int insertArticleAdd(MaterialVo matMainVo) {
		return dao.insertArticleAdd(matMainVo);
	
	}
	

	/**
	 *@Method Name : articleUpdate
	 *@date : 2018. 9. 20.
	 *@author : JeeSeon
	 *@Method 설명 : 물품 수정
	 *@param matVo
	 *@return articleUpdate
	 */
	@Override
	public int articleUpdate(MaterialVo matVo) {
		return dao.articleUpdate(matVo);
	}
	
	
	/**
	 *@Method Name : deleteArticle
	 *@date : 2018. 9. 16.
	 *@author : JeeSeon
	 *@Method 설명 : 선택된 물품 삭제
	 *@param mat_code
	 *@return deleteArticle
	 */
	@Override
	public int deleteArticle(List<String> mat_code) {
		return dao.deleteArticle(mat_code);
	}
	
	
	/**
	 *@Method Name : getAct
	 *@date : 2018. 9. 27.
	 *@author : JeeSeon
	 *@Method 설명 : 물품을 여러가지 옵션으로 검색한다
	 *@param act
	 *@return getAct
	 */
	@Override
	public List<MaterialMainVo> getAct(Map<String, String> act) {
		return dao.getAct(act);
	}
	

	
	
	
}
